<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ex_camera_demo_marker_point</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// IMPORTANT: Initialize exCamera FIRST, setup Camera next

// initialize the camera here
// check the Step &amp; Global Left Mouse Button event for the Camera Effects

// use a variable to turn camera object following the player object on and off
_follow_object = true;

// initialize exCamera first (must be called before any ex_camera_* functions are used!)
ex_camera_initialize();

// turn on debug messages (note: this can impact performance! turn it off if you don't need it!)
ex_camera_set_debug_mode(true);


// create a camera

// test: normal (limit bounds)
ex_camera_create("main", 0, 0, 0, 1280, 720, 0, 0, 0, 100, obj_ex_camera_demo_camera, true, 0, 0, room_width, room_height);

// test: normal (no limit bounds)
//ex_camera_create("main", 0, 0, 0, 1280, 720, 0, 0, 0, 100, obj_ex_camera_demo_camera, false);

// test: normal (limit bounds and zoom)
//ex_camera_create("main", 0, 0, 0, 1280, 720, 0, 0, 0, 80, obj_ex_camera_demo_camera, true);

// test: normal (no limit bounds and zoom)
//ex_camera_create("main", 0, 0, 0, 1280, 720, 0, 0, 0, 70, obj_ex_camera_demo_camera, false);

// test: normal (limit bounds and not focused on any object)
//ex_camera_create("main", 0, 0, 0, 1280, 720, 0, 0, 0, 100, noone, true);

// test: normal (no limit bounds and not focused on any object)
//ex_camera_create("main", 0, 0, 0, 1280, 720, 0, 0, 0, 100, noone, false);


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset camera follow back to object

// note: used by scr_test_focus_player() script to reset the camera follow

show_debug_message("  &gt; Camera following player again");

_follow_object = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Follow player and play Effects

// follow
if (instance_exists(obj_ex_camera_demo_player) and _follow_object == true) {
    ex_camera_scroll_to_object("main", obj_ex_camera_demo_player, 6, scr_ease_inout_sine, true);
}

// scroll effect
if (keyboard_check_pressed(ord("M")) and _follow_object == true) {
    _follow_object = false;
    
    //ex_camera_set_bounds("main", 0, 0, room_width, room_height); // how to release bounds if necessary
    
    ex_camera_scroll_to_object("main", inst_CA099180, 24, scr_ease_inout_sine, true, scr_test_focus_player);
    //ex_camera_scroll_to_point("main", 2000, 2000, 24, scr_ease_inout_sine, true, scr_test_focus_player);
    //ex_camera_scroll_by("main", 32, 32, 24, scr_ease_inout_sine, scr_test_focus_player);
}

// shake effect
if (keyboard_check_pressed(ord("S"))) {
    ex_camera_shake("main", 8, 8, 0, 12, scr_ease_out_sine);
}

// tilt effect
if (keyboard_check_pressed(ord("T"))) {
    ex_camera_tilt("main", 10, 32, scr_ease_inout_back);
}

// flash effect
if (keyboard_check_pressed(ord("F"))) {
   ex_camera_flash("main", 0.9, 20, scr_ease_out_sine, c_white, bm_add);
}

// fade effect
if (keyboard_check_pressed(ord("A"))) {
   ex_camera_fade("main", 1, 30, scr_ease_inout_sine, c_black);
}

// zoom out (-)
if (keyboard_check_pressed(189)) {
    ex_camera_zoom("main", 120, 12, scr_ease_inout_sine);
}

// zoom in (+)
if (keyboard_check_pressed(187)) {
    ex_camera_zoom("main", 60, 12, scr_ease_inout_sine);
}

// zoom reset (0)
if (keyboard_check_pressed(48)) {
    ex_camera_zoom("main", 100, 12, scr_ease_inout_sine);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Test Effects (Mobile)

// change this to test the effect on mobile
var _test_effect = 1;
    // 0 = flash
    // 1 = scroll
    // 2 = shake
    // 3 = tilt
    // 4 = flash
    // 5 = fade
    // 6 = zoom out
    // 7 = zoom in

// flash effect
if (_test_effect == 0) {
    ex_camera_flash("main", 0.9, 20, scr_ease_out_sine, c_white, bm_add);
}

// scroll effect
if (_test_effect == 1 and _follow_object == true) {
    _follow_object = false;
    
    //ex_camera_set_bounds("main", 0, 0, room_width, room_height); // how to release bounds if necessary
    
    ex_camera_scroll_to_object("main", inst_CA099180, 24, scr_ease_inout_sine, true, scr_test_focus_player);
    //ex_camera_scroll_to_point("main", 2000, 2000, 24, scr_ease_inout_sine, true, scr_test_focus_player);
    //ex_camera_scroll_by("main", 32, 32, 24, scr_ease_inout_sine, scr_test_focus_player);
}

// shake effect
if (_test_effect == 2) {
    ex_camera_shake("main", 8, 8, 0, 12, scr_ease_out_sine);
}

// tilt effect
if (_test_effect == 3) {
    ex_camera_tilt("main", 10, 32, scr_ease_inout_back);
}

// flash effect
if (_test_effect == 4) {
   ex_camera_flash("main", 0.9, 20, scr_ease_out_sine, c_white, bm_add);
}

// fade effect
if (_test_effect == 5) {
   ex_camera_fade("main", 1, 30, scr_ease_inout_sine, c_black);
}

// zoom out (-)
if (_test_effect == 6) {
    ex_camera_zoom("main", 120, 12, scr_ease_inout_sine);
}

// zoom in (+)
if (_test_effect == 7) {
    ex_camera_zoom("main", 60, 12, scr_ease_inout_sine);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cleanup Camera

ex_camera_destroy("main");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
