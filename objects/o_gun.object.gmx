<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>s_guns</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
image_angle = 0;

//Barrel width and Length(Unused)
barrel_length = -3;
barrel_height = -1;
//Sprite index/Gun selected
spr = 1;
//Gun Damage
dmg = 1;
//Accuracy(1-10)
accuracy = 1;
//Firerate(In Seconds)
firerate = 1;
//Shake ammount
shake = 0;
//Enemy Knockback(Unimplemented)
knockback = 0;
//Can Fire
canFire = true;
//Offsets for gun handling
offsetX = 0;
offsetY = 0;
//Sell Price of a gun
sellPrice = 0;
//Ammo for each of the guns
ammo[0] = 1000000000;
ammo[1] = 100;
ammo[2] = 100;
ammo[3] = 100;
ammo[4] = 100;
//If they have the gun
hasGun[0] = false; //uzi
hasGun[1] = true; //pistol
hasGun[2] = false; //sawnoff
hasGun[3] = false; //ak47
hasGun[4] = false;
//Accuracy Modifier
acSilence = 0.1;
acLaser = 0.3;
acScope = 0.4;

//Has attachment
hasLaser = false;
hasScope = false;
hasSilencer = false;
hasClip = false;
hasExploseive = false;


//expansions
for(i = 0; i &lt; o_gun.image_number; i++){
for(b = 0; b &lt; 2; b++){
expansion[i,b] = 0;
}
}



//Reloading system;
clipSize = 1;
reloadTime = room_speed * 0.6;;
reload = 0;
bulletsFired = 0;
reloading = false;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canFire = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = o_player.x;
y = o_player.y + o_player.hop-(18/2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!occupied){


//A direction variable pointing to the mouse.
var mousedir = point_direction(x,y,mouse_x,mouse_y);

//Always draw above the player
depth = o_player.depth - 1;


//Reloading
if(reloading){
canFire = false;
reload++;
if(reload &gt; reloadTime){
reload = 0;
reloading = false;
canFire = true;
}

}

//Firing the gun
if(canFire and mouse_check_button(mb_left) and ammo[spr] &gt; 0 and !reloading){
    bulletsFired++;
    if(bulletsFired &gt; clipSize){
    bulletsFired = 0;
    reloading = true;
    exit;
    }

    //Setting up the for loop
    var i = 0;
    var mx = 1;
    //For the shotgun
    if(spr == 2){
    mx = 5;
    }
    if(spr == 4){
    mx = 8;
    }
    barrel_x = lengthdir_x(barrel_length, mousedir);
    barrel_y = lengthdir_y(barrel_height, mousedir);
    for(i = 0; i &lt; mx; i++){
    //Create an instance of bullet
    p = instance_create(x + barrel_x,y + barrel_y,o_bullet);
    //Set that bullets variables
    p.dir = mousedir + (accuracy * random_range(1 - acSilence - acLaser - acScope,-1 + acSilence + acLaser + acScope));
    p.dmg = dmg;
    p.shake = shake;
    p.explosive = hasExploseive
    //Set a force
    var xforce = lengthdir_x(5, p.dir);
    var yforce = lengthdir_y(5, p.dir);
    //Apply the force.
    with(p){
            physics_apply_impulse(x,y,xforce,yforce);
           }
    }
    //Decrease the ammo
    ammo[spr]--;
    //Set the alarm for the fire rate
    alarm[0] = firerate * room_speed;
    //Set can fire to false
    canFire = false;

}


//Select a gun
//Pistol
if(spr == 1){
    clipSize = 6;
    reloadTime = room_speed * 2.5;
    dmg = 10;
    accuracy = 3;
    firerate = .5;
    shake = 1;
    knockback = 0;
    offsetX = 11;
    offsetY = 9;
    scr_check_expansion(1);
}
//Uzi
if(spr == 0){
    clipSize = 32;
    reloadTime = room_speed * 2;
    dmg = 6;
    accuracy = 7;
    firerate = 0.1;
    shake = 0.25;
    offsetX = 12;
    offsetY = 10;
    scr_check_expansion(0);
}
//SawnOff
if(spr == 2){
    clipSize = 1;
    reloadTime = room_speed * 1;
    dmg = 24;
    accuracy = 7;
    firerate = 0.1;
    shake = 30;
    offsetX = 10;
    offsetY = 10;
    scr_check_expansion(2);
}
//Ak47
if(spr == 3){
    clipSize = 32;
    reloadTime = room_speed * 1;
    dmg = 18;
    accuracy = 8;
    firerate = 0.2;
    shake = 30;
    offsetX = 10;
    offsetY = 8;
    scr_check_expansion(3)
}
//Double Barrel
if(spr == 4){
    clipSize = 2;
    reloadTime = room_speed * 2;
    dmg = 2;
    accuracy = 5;
    firerate = .5;
    shake = 30;
    offsetX = 6;
    offsetY = 10;
    scr_check_expansion(4);
}

//Switching the weapons
if(keyboard_check_pressed(ord('1'))){
if(hasGun[1] == true){
spr = 1;

}

}

if(keyboard_check_pressed(ord('2'))){
if(hasGun[0] == true){
spr = 0;

}

}

if(keyboard_check_pressed(ord('3'))){
if(hasGun[2] == true){
spr = 2;

}

}

if(keyboard_check_pressed(ord('4'))){
if(hasGun[3] == true){
spr = 3;

}

}

if(keyboard_check_pressed(ord('5'))){
if(hasGun[4] == true){
spr = 4;

}

}




//Something for the Has Laser vsriable
if(keyboard_check_pressed(ord('G'))){
hasLaser = !hasLaser;
}

image_angle = mousedir;
if (mousedir &gt;= 90 and mousedir &lt;= 270)
{
    image_yscale = -1;
    depth = -y-3;
}
else 
{
    image_yscale = 1;
    depth = -y-7;
}

//End bracket for occupied
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_white)
//draw_text(0,0,"Ammo:" + string(ammo[spr]));
//draw_text(0,400,string(fps_real));
//draw_text(0,432,string(fps));
draw_text(0,464,string(instance_number(reload)));




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hasLaser){
    var mousedir = point_direction(x,y,mouse_x,mouse_y);
    
    //draw_line_width_colour(x,y,x + lengthdir_x(20,image_angle), y + lengthdir_y(20,image_angle),1,c_red, c_black);
    //draw_set_color(c_red)
    //draw_set_alpha(.15)
    
    lazer_point = collision_line_point(x,y,mouse_x,mouse_y,o_lifeform,true,true)
    draw_line_ext(x,y,lazer_point[1],lazer_point[2],.5,c_red,.5,0)

    draw_set_alpha(1);
    acLaser = 0.1;
                           

}else{
    acLaser = 0;
}

//draw the gun
draw_sprite_ext(s_guns,spr,x,y + 1,image_xscale,image_yscale,image_angle,c_white,1);
sprite_set_offset(s_guns, offsetX, offsetY);

//draw the attatchments over it
if hasSilencer {
    sprite_set_offset(s_guns_silencer, offsetX, offsetY);
    draw_sprite_ext(s_guns_silencer,spr,x,y + 1,image_xscale,image_yscale,image_angle,c_white,1);
    acSilence = 0.1;
}else{
    acSilence = 0;
}
if hasScope {
    sprite_set_offset(s_guns_scope, offsetX, offsetY);
    draw_sprite_ext(s_guns_scope,spr,x,y + 1,image_xscale,image_yscale,image_angle,c_white,1);
    acScope = 0.4;
}else{
    acScope = 0;
}
if hasClip {
    sprite_set_offset(s_guns_clip, offsetX, offsetY);
    draw_sprite_ext(s_guns_clip,spr,x,y + 1,image_xscale,image_yscale,image_angle,c_white,1);
}

//draw_healthbar(x,y,x + 100,y + 10,(reload/reloadTime) * 100, c_black,c_yellow,c_yellow,0,true,true);



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
