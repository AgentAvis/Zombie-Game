<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>basecount = 5
wavetimer = 0
zombie_number = 0 //init
wave = 0

delay = 20
delaytimer = 0

wave_time = 5 //seconds

zombie_current = 0 //how many zombies are there right now

draw_ui = true

z_normal = 0
z_fat = 0
z_little = 0


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.pause){
exit;
}

wave_time = 10 + floor(basecount);
wave_time = clamp(wave_time,5,25);

if keyboard_check_pressed(ord('L')) { 
    wave ++ //debug comand used to force advance the wave by one
    wavetimer = wave_time * room_speed
    basecount += 1
    
}

if zombie_current &lt;= 0 {
    wavetimer ++ //if there are no zombies, count up towards the next wave
}

if wavetimer &gt; room_speed * wave_time {
    
    p = instance_create(x,y,wave_draw);
    p.count = true;
    p.num = wave;
    
    

    //setup how many of each zomb you want
    z_normal = (clamp(floor(basecount*.75),0,50)) //max cap 30
    z_fat = (clamp(floor(basecount*.2),0,20)) //max cap 8
    z_little = (clamp(floor(basecount*1),1,20)) //max cap 40
    
    //add each zomb into the zombie_max
    zombie_max = z_normal + z_fat + z_little//instance_number(o_lifeform)
    
    //zombie_current should be equal to zombie_max at this point
    zombie_current = instance_number(o_lifeform) + zombie_max
    
    if(wave = 10){
    zombie_max = 1;
    zombie_current = 0;
    z_normal = 0;
    z_fat = 0;
    z_little = 0;
    instance_create(o_spawn_1.x,o_spawn_1.y,o_boss_test);
    }
    
    if(wave = 20){
    zombie_max = 1;
    zombie_current = 0;
    z_normal = 0;
    z_fat = 0;
    z_little = 0;
    instance_create(o_spawn_1.x,o_spawn_1.y,o_ufo_boss);
    }
    
    //reset the timer
    wavetimer = 0
    
    //incriment the amount of zombs to spawn
    basecount += 1
    
    //set the delay to spawn zombs at
    delay = (-((wave/100)-1))*room_speed
    
    //increase the wave number
    wave ++
}

//update the amount of zombies alive/to be spawned
zombie_current = instance_number(o_lifeform) + z_normal + z_fat + z_little


delaytimer ++

//spawn the zombies if its been delay long enough
if delaytimer &gt; delay {
    delaytimer = 0
    //spawn fat zombs
    if wave &lt; 5 { z_fat = 0 } //no fat boys till wave 5
    if wave &lt; 2 { z_normal = 0 } //no fat boys till wave 5
    
    if z_fat &gt;= 1 {
        z_fat --
        instance_create(o_spawn_1.x,o_spawn_1.y,o_zombie_fat)
        instance_create(o_spawn_2.x,o_spawn_2.y,o_zombie_fat)       
    }
    
    //if the fat zombs are done spawning, and we need to spawn reg zombs, spawn them
    if z_normal &gt;= 1 and z_fat &lt; 1{
        z_normal --
        instance_create(o_spawn_1.x,o_spawn_1.y,o_zombie_normal)
        instance_create(o_spawn_2.x,o_spawn_2.y,o_zombie_normal)    
    }
    
    if z_little &gt;= 1 and z_normal &lt; 1{
        z_little --
        instance_create(o_spawn_1.x,o_spawn_1.y,o_zombie_little)
        instance_create(o_spawn_2.x,o_spawn_2.y,o_zombie_little)    
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_color(c_white)
if keyboard_check_pressed(ord("O")) {
    draw_ui = !draw_ui
    global.fuckwithjosh = false
}
if draw_ui {
    draw_text_outlined(200,200,"secks: " + string(wavetimer/room_speed)  + " wave: " + string(wave) + " | basecount: " + string(basecount),c_white,c_black)

}
    if((!instance_exists(o_lifeform))){
    draw_healthbar((window_get_width()/2) - 150,0,(window_get_width()/2) + 150,25,((wavetimer/room_speed)/wave_time) * 100, c_black, c_green, c_green, 0 ,true, true);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_color(c_white);
    draw_text_outlined(((window_get_width()/2) - 150) + 150,25/2,string_format(wave_time - (wavetimer/room_speed),2,0),c_white,c_black);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
